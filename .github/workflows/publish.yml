name: Publish crate on tag

on:
  push:
    tags: ['v*']

permissions:
  contents: read

jobs:
  check-branch:
    runs-on: ubuntu-latest
    outputs:
      should_publish: ${{ steps.branch.outputs.should_publish }}
      reason: ${{ steps.branch.outputs.reason }}
    steps:
      - name: Checkout (full history for all branches/tags)
        uses: actions/checkout@v5
        with:
          fetch-depth: 0

      - id: branch
        name: Ensure tag commit is on default branch
        env:
          DEFAULT_BRANCH: ${{ github.event.repository.default_branch }}
        shell: bash
        run: |
          set -euo pipefail
          echo "Default branch: $DEFAULT_BRANCH"
          git rev-parse "origin/$DEFAULT_BRANCH" >/dev/null

          if git merge-base --is-ancestor "${GITHUB_SHA}" "origin/$DEFAULT_BRANCH"; then
            echo "should_publish=true"  >> "$GITHUB_OUTPUT"
            echo "reason=tag commit is on $DEFAULT_BRANCH" >> "$GITHUB_OUTPUT"
            echo "::notice title=Branch check::Tag ${GITHUB_REF_NAME} is on ${DEFAULT_BRANCH}; will publish."
          else
            echo "should_publish=false" >> "$GITHUB_OUTPUT"
            echo "reason=tag commit not yet on $DEFAULT_BRANCH" >> "$GITHUB_OUTPUT"
            echo "::notice title=Branch check::Tag ${GITHUB_REF_NAME} is NOT on ${DEFAULT_BRANCH}; skipping publish."
          fi

      - name: Summarize branch decision
        run: |
          {
            echo "### Publish on tag â€” branch check"
            echo "- Tag: \`${GITHUB_REF_NAME}\`"
            echo "- Should publish: **${{ steps.branch.outputs.should_publish }}**"
            echo "- Reason: ${{ steps.branch.outputs.reason }}"
          } >> "$GITHUB_STEP_SUMMARY"

  publish:
    needs: check-branch
    if: needs.check-branch.outputs.should_publish == 'true'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v5

      - name: Show Rust toolchain
        run: |
          rustup --version
          rustc -V
          cargo -V

      - name: Verify tag matches crate version
        shell: bash
        run: |
          set -euo pipefail
          TAG_VERSION="${GITHUB_REF_NAME#v}"
          CRATE_VERSION="$(cargo metadata --no-deps --format-version 1 | jq -r '.packages[0].version')"
          [ "$TAG_VERSION" = "$CRATE_VERSION" ] || {
            echo "Tag v$TAG_VERSION does not match Cargo.toml version $CRATE_VERSION"
            exit 1
          }

      - name: Publish to crates.io
        env:
          CARGO_REGISTRY_TOKEN: ${{ secrets.CARGO_REGISTRY_TOKEN }}
        shell: bash
        run: |
          set -euo pipefail
          cargo publish --locked --dry-run
          cargo publish --locked
